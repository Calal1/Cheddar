/* Generated by Babel */
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i['return']) _i['return'](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError('Invalid attempt to destructure non-iterable instance'); } }; })();

var _ref;

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x6, _x7, _x8) { var _again = true; _function: while (_again) { var object = _x6, property = _x7, receiver = _x8; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x6 = parent; _x7 = property; _x8 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) arr2[i] = arr[i]; return arr2; } else { return Array.from(arr); } }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _chars = require('../chars');

var _tokTks = require('../tok/tks');

var _tokTks2 = _interopRequireDefault(_tokTks);

// Import Tokenizer class

var _tokTok = require('../tok/tok');

var _tokTok2 = _interopRequireDefault(_tokTok);

// Import Tokens Class

// Set data
var OPLIST = (_ref = []).concat.apply(_ref, _toConsumableArray(_chars.OP.concat(_chars.UOP)));

// Symbol operators
var UOLIST = OPLIST.filter(function (op) {
    return op.split("").every(function (o) {
        return _chars.SYMBOL_FILTER.indexOf(o);
    });
});

var Tokenize = function Tokenize(c) {
    var i = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];
    var r = arguments.length <= 2 || arguments[2] === undefined ? false : arguments[2];

    // c - input
    // i - index
    // r - expect recursed

    // tokens
    // |- properties
    // |   |- unary prop operators
    // |- digit
    // |   |- integers
    // |   |- decimals
    // |   |- bases
    // |       |- binary
    // |       |- hexadecimal
    // |- binary operators
    // |- unary operators

    var tok_list = [];

    main: for (; i < c.length; i++) {

        // whitespace

        if (_chars.WHITESPACE.indexOf(c[i]) > -1) continue; // Ignore whitespace

        // properties

        if (_chars.MALPHA.indexOf(c[i]) > -1) {
            // Alpha beginning

            var tok = c[i]; // Token variable

            i++;

            while (i < c.length) {
                // Get char

                if (_chars.MALPHA.indexOf(c[i]) > -1) {
                    tok += c[i++]; // next char
                } else {
                        // Go back and eit;
                        --i;
                        break;
                    }
            }

            if (OPLIST.indexOf(tok) == -1) {
                // return [1, "Unknown operator"];
            }

            tok_list.push(tok);
            continue;
        }

        // digits

        if (_chars.DIGITS.indexOf(c[i]) > -1 || c[i] === "." || c[i] === "-") {
            if (c[i] === "-") i++;
            var tok = (c[i - 1] === "-" ? "-" : "") + (c[i] === "." ? "0." : c[i]); //
            var dec = c[i] === "."; // is a decimal?

            i++;

            while (i < c.length) {

                if (_chars.DIGITS.indexOf(c[i]) > -1) {
                    tok += c[i++];
                } else if (c[i] == ".") {

                    if (dec === true) {

                        // decimal after a decimal in the number already occured
                        return [i, [1, "Repeated decimal"]];
                    } else {

                        tok += c[i];

                        i++;
                        if (_chars.DIGITS.indexOf(c[i]) > -1) {
                            tok += c[i];
                        } else {
                            return [i, [1, 'Unexpected token after decimal: ' + c[i]]];
                        }

                        dec = true;
                        i++;
                    }
                } else if (c[i - 1] === '0' && c[i]) {
                    // backreference for 0

                    // MARK: BASE CONVERSIONS
                    // base conversions:
                    //             012   4567 10  16
                    var bases = 'ubt???soni?d???x';
                    var b = bases.indexOf(c[i]); // base #
                    var numerals = _chars.NUMERALS.slice(0, b + 1); // numerals

                    tok += c[i];

                    if (_chars.ALPHA.indexOf(bases[b]) > -1) {
                        // valid base id
                        while (i < c.length) {
                            i++;
                            if (_chars.NUMERALS.indexOf(c[i]) > -1) {
                                // Is a numberal

                                if (numerals.indexOf(c[i]) > -1) tok += c[i];else return [i, [1, 'Numeral out of specified base range']];
                            } else {
                                break;
                            }
                        }
                    } else {
                        return [i, [1, 'Unexpected base op `' + c[i] + '`']];
                    }

                    dec = true;
                } else {
                    --i;
                    break;
                }
            }

            tok_list.push(tok);
            continue;
        }

        if (c[i] === "(") {
            // expression

            // runs tokenizer on nested expresson
            // Ensure
            var nest_res = Tokenize(c, i + 1, true);

            tok_list.push(nest_res[1]);
            i = nest_res[0];

            continue;
        }

        if (c[i] === r) {
            // exit expression level

            // should it be exiting?
            // checks if `r`, the recurse
            // variable is set which
            // is set by a to-nest
            // expression.

            break;
        }

        // Match an operator
        // Greedy matches largest operator
        if (_chars.SYMBOL_FILTER.indexOf(c[i]) > -1) {

            // Pending possible operators
            // Used to hold ambiguous choices.
            var PENDING_OP = c[i];
            var STATE_DONE = false;

            // Ensure operator exists
            //if (<U/D>.length === 0)
            //    return [i, [1, `Unknown operator ${PENDING_OP}`]];

            // While:
            //  1. ambiougous op
            // &2. code len + 1
            while (i <= c.length) {

                if (i === c.length) {
                    // End of file
                    // Errors for two reasons:
                    //  1. Ambiguous Op
                    //  2. Postfix OP
                    return [i, [1, 'Unexpected EOF when tokenizing expression']];
                }

                // Next char
                i++;

                // If it's a symbol disambiguate
                if (_chars.SYMBOL_FILTER.indexOf(c[i])) {

                    var OP_COPY = PENDING_OP + c[i]; // store working operator

                    // If the operator exists
                    if (UOLIST.indexOf(OP_COPY) > -1) PENDING_OP = OP_COPY; // store it
                    else STATE_DONE = true; // interpret operator state
                } else {
                        STATE_DONE = true; // interpret operator state
                    }

                if (STATE_DONE) {
                    // Not a symbol character
                    // backup, and send for parsing

                    // First add to stack
                    tok_list.push(PENDING_OP);

                    --i;
                    continue main; // next char
                }
            }
        }
    }

    return [i, new _tokTks2['default'](tok_list)];
};

var CheddarTokExpression = (function (_CheddarTok) {
    _inherits(CheddarTokExpression, _CheddarTok);

    function CheddarTokExpression() {
        var Code = arguments.length <= 0 || arguments[0] === undefined ? "" : arguments[0];
        var Index = arguments.length <= 1 || arguments[1] === undefined ? 0 : arguments[1];

        _classCallCheck(this, CheddarTokExpression);

        _get(Object.getPrototypeOf(CheddarTokExpression.prototype), 'constructor', this).call(this, Code, Index);
    }

    _createClass(CheddarTokExpression, [{
        key: 'exec',
        value: function exec() {
            var Recurse = arguments.length <= 0 || arguments[0] === undefined ? false : arguments[0];

            var Result = Tokenize(this.Code, this.Index, Recurse);

            var _Result = _slicedToArray(Result, 2);

            this.Index = _Result[0];
            this.Tokens = _Result[1];

            return this;
        }
    }]);

    return CheddarTokExpression;
})(_tokTok2['default']);

exports['default'] = CheddarTokExpression;
module.exports = exports['default'];