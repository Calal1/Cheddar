/* Generated by Babel */
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

var _tokLex = require('../tok/lex');

var _tokLex2 = _interopRequireDefault(_tokLex);

var _chars = require('../chars');

var _errList = require('../err/list');

var CheddarError = _interopRequireWildcard(_errList);

var CheddarLiteral = (function () {
    function CheddarLiteral(Code, Index) {
        _classCallCheck(this, CheddarLiteral);

        // this.InternelRepresentation = InternelRepresentation;

        this.Code = null;
        this.Index = null;

        this.Lexer = new _tokLex2['default'](null, null);
    }

    _createClass(CheddarLiteral, [{
        key: 'load',
        value: function load(Code, Index) {
            this.Lexer = new _tokLex2['default'](Code, Index);
        }
    }, {
        key: 'exec',
        value: function exec() {

            this.Lexer.open();

            var chr = this.Lexer.getchar();

            if (_chars.TOKEN_START.indexOf(chr) > -1) {
                this.Lexer.addtoken(chr);

                while (chr = this.Lexer.getchar()) if (_chars.TOKEN_START.indexOf(chr) > -1) this.Lexer.addtoken(chr);else break;

                return this.Lexer.close();
            } else {
                return this.Lexer.error(CheddarError.EXIT_NOTFOUND);
            }
        }
    }]);

    return CheddarLiteral;
})();

exports['default'] = CheddarLiteral;
module.exports = exports['default'];