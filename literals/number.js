/* Generated by Babel */
'use strict';

Object.defineProperty(exports, '__esModule', {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

var _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; desc = parent = getter = undefined; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj['default'] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }

function _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var _literal = require('./literal');

var _literal2 = _interopRequireDefault(_literal);

var _chars = require('../chars');

var _errList = require('../err/list');

var CheddarError = _interopRequireWildcard(_errList);

var CheddarNumberTok = (function (_CheddarLiteral) {
    _inherits(CheddarNumberTok, _CheddarLiteral);

    function CheddarNumberTok() {
        _classCallCheck(this, CheddarNumberTok);

        _get(Object.getPrototypeOf(CheddarNumberTok.prototype), 'constructor', this).apply(this, arguments);
    }

    _createClass(CheddarNumberTok, [{
        key: 'exec',
        value: function exec() {

            this.open();

            var chr = this.getChar();

            if (_chars.DIGITS.indexOf(chr) > -1 || _chars.NUMBER_DECIMALS.indexOf(chr) > -1) {

                chr = this.getChar();

                var digit_set = _chars.DIGITS;
                var digit_base = _chars.BASE_IDENTIFIERS.indexOf(chr);

                if (digit_base > -1) {
                    var base = _chars.BASE_RESPECTIVE_NUMBERS[_chars.BASE_IDENTIFIERS.indexOf(chr)];
                    digit_set = _chars.NUMERALS.slice(0, base);
                    this.addToken(base); // Add the base number as a token
                } else {
                        this.addToken(10); // base 10
                        this.Index -= 2; // Go back to the beginning of the literal
                    }

                this.newToken(); // Start new token

                // ensure digits are valid in base
                while (chr = this.getChar()) if (digit_set.indexOf(chr) > -1) this.addToken(chr);else if (_chars.NUMBER_GROUPING.indexOf(chr) > -1) if (this.last && digit_base.indexOf(this.Code[this.Index]) > -1) continue;else this.error(CheddarError.UNEXPECTED_TOKEN);else break; // continue parsing

                // this.jumpWhite() // uncomment to allow whitespace before decimal

                // if there were no digits and it's not a decimal
                if (!this.last && _chars.NUMBER_DECIMALS.indexOf(chr) === -1) {
                    --this.Index; // Go back a char
                    this.error(CheddarError.EXIT_NOTFOUND); // Respond that it's not a number
                }

                // if it's at a decimal
                if (_chars.NUMBER_DECIMALS.indexOf(chr) > -1) {
                    // this.jumpWhite() // Uncomment to allow whitespace after decimal
                    this.addToken(chr);
                    while (chr = this.getChar()) if (digit_set.indexOf(chr.toUpperCase()) > -1) this.addToken(chr);else break;
                }

                return this.close();
            } else {
                return this.error(CheddarError.EXIT_NOTFOUND);
            }
        }
    }]);

    return CheddarNumberTok;
})(_literal2['default']);

exports['default'] = CheddarNumberTok;
module.exports = exports['default'];