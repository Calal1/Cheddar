/* Generated by Babel */
"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var VSLTokens = (function () {
    function VSLTokens(tokens) {
        _classCallCheck(this, VSLTokens);

        if (Number.isInteger(tokens.length) && tokens.splice) {
            this.length = tokens.length;
            for (var i = 0; i < tokens.length; i++) {
                this[i] = tokens[i];
            }
        } else if (tokens === null) {
            this.length = -1;
        } else {
            throw new TypeError("VSLTokens: provided instantiation token is invalid");
        }
    }

    _createClass(VSLTokens, [{
        key: "UpdateTokends",
        value: function UpdateTokends(tokens) {
            if (Number.isInteger(tokens.length) && tokens.splice) {
                this.length = tokens.length;
                for (var i = 0; i < tokens.length; i++) {
                    this[i] = tokens[i];
                }
            } else if (tokens === null) {
                this.length = -1;
            } else {
                throw new TypeError("VSLTokens: provided update token is invalid");
            }
        }
    }, {
        key: Symbol.iterator,
        value: regeneratorRuntime.mark(function value() {
            var i;
            return regeneratorRuntime.wrap(function value$(context$2$0) {
                while (1) switch (context$2$0.prev = context$2$0.next) {
                    case 0:
                        i = 0;

                    case 1:
                        if (!(i < this.length)) {
                            context$2$0.next = 7;
                            break;
                        }

                        context$2$0.next = 4;
                        return this[i];

                    case 4:
                        i++;
                        context$2$0.next = 1;
                        break;

                    case 7:
                        return context$2$0.abrupt("return", this);

                    case 8:
                    case "end":
                        return context$2$0.stop();
                }
            }, value, this);
        })
    }]);

    return VSLTokens;
})();

exports["default"] = VSLTokens;
module.exports = exports["default"];